name: Go Build and Release

on:
  push:
    tags:
      - 'v*.*.*' # 只在推送符合版本标签的分支时触发
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Go Program
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'  

      - name: Build Go executable
        run: |
          go build -o cmddir.exe ./main.go # 根据实际情况修改路径和文件名

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v3
        with:
          name: cmddir
          path: cmddir.exe

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20' # 使用你需要的 Go 版本

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: cmddir

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref.replace('refs/tags/', ''),
              name: `Release ${context.ref.replace('refs/tags/', '')}`,
              draft: false,
              prerelease: false
            });

            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: 'cmddir.exe',
              data: require('fs').readFileSync('cmddir.exe')
            });
